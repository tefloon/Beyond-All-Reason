#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, flare, barrel;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

Create()
{
	hide flare;
	gun_1 = 0;
	restore_delay = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.000000>;
	turn barrel to x-axis -1*pitch speed <120.000000>;
	
	wait-for-turn turret around y-axis;
		
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from flare;
		move barrel to z-axis [-1.000000] speed [400.000000];
		wait-for-move barrel along z-axis;
		move barrel to z-axis [0.000000] speed [1.000000];
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from flare;
		move barrel to z-axis [-1.000000] speed [400.000000];
		wait-for-move barrel along z-axis;
		move barrel to z-axis [0.000000] speed [1.000000];
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare;
		return (0);
	}
	if( gun_1 == 1 )
	{
		piecenum = flare;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode turret type SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL;
}
