#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turrbase, turret, barrels, flare, lida, lidb, aimfrom, aimpoint;

static-var  restore_delay, is_open, shotcount;
static-var  Stunned;

// Signal definitions
#define SIG_AIM				2
#define SIG_OPENCLOSE       4

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 0

#include "unit_hitbyweaponid_and_smoke.h"

Close()
{
	set-signal-mask SIG_AIM;
	is_open = 0;
	turn turret to y-axis 0 speed <100.000000>;
	wait-for-turn turret around y-axis;
	move turrbase to y-axis [-16] speed [69];
	wait-for-move turrbase along y-axis;
	turn lida to z-axis <0> speed <120>;
	turn lidb to z-axis <0> speed <120>;
	wait-for-turn lida around z-axis;
	set ARMORED to 1;
}

Open()
{
	set ARMORED to 0;
	turn lida to z-axis <-179> speed <250>;
	turn lidb to z-axis <179> speed <250>;
	wait-for-turn lidb around z-axis;
	move turrbase to y-axis [12] speed [69.000000];
	wait-for-move turrbase along y-axis;
	is_open = 1;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	start-script Close();
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	shotcount = 1;
	hide flare;
	restore_delay = 3000;
	is_open = 0;
	move turrbase to y-axis [-12] now;
	move turret to y-axis [5] now;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	// close and armor once construction is done
	// only if no target in range when done
	sleep 1000;
	if ( is_open == 0 )
	{
		start-script Close();
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if ( is_open == 0 )
	{
		start-script Open();
		start-script RestoreAfterDelay();
	}
	while( is_open == 0 )
	{
		sleep 150;
	}
	turn turret to y-axis heading speed <200.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	wait-for-turn barrels around y-axis;
	sleep 50;
	wait-for-turn barrels around y-axis;
	sleep 50;
	wait-for-turn barrels around y-axis;
}
Shot1() {
	if (shotcount == 1) {
		turn barrels to z-axis <120> speed <250>;
		shotcount = 2;
	} else if (shotcount == 2) {
		turn barrels to z-axis <240> speed <250>;
		shotcount = 3;
	} else {
		turn barrels to z-axis <0> speed <250>;
		shotcount = 1;
	}
	emit-sfx 1024 + 0 from flare;
}
QueryPrimary(piecenum)
{
	if (is_open == 1)
	{
		piecenum = flare;
	}
	else
	{
		piecenum = aimfrom;
	}
}

SweetSpot(piecenum)
{
	piecenum = aimpoint;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode lida type BITMAPONLY | NOHEATCLOUD;
		explode lidb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode turrbase type FALL | NOHEATCLOUD;
		explode barrels type FALL | NOHEATCLOUD;
		explode lida type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lidb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turrbase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrels type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lida type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lidb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lida type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lidb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}