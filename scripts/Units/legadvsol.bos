#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, A0, A, A1, A2, A3, A4, A51, A52, B, B1, B2, B31, B32, C0, C, C1, C2, C3, C4, C51, C52, D0, D, D1, D2, D3, D4, D51, D52, E, E1, E2, E31, E32, F0, F, F1, F2, F3, F4, F51, F52, container;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, status, sunheading, unitheading;

lua_solarpoint() 
{
	return(0);
}

solarreturn(status, sunheading) 
{
	unitheading = get(HEADING);
	if (status==1) {
		turn container to y-axis (0-unitheading) + (sunheading*182) now;
		turn turret to y-axis (0+unitheading) + (sunheading*(-182)) now;
		while( get BUILD_PERCENT_LEFT )
		{
			sleep 400;
		}
		sleep 1800;
		turn container to x-axis <30> speed <12>;
	}
}

Create()
{
	dont-cache turret;
	call-script lua_solarpoint();
	turn A0 to y-axis <60> now;
	turn C0 to y-axis <-60> now;
	turn D0 to y-axis <60> now;
	turn F0 to y-axis <-60> now;
	turn A to y-axis <-60> now;
	turn C to y-axis <60> now;
	turn D to y-axis <-60> now;
	turn F to y-axis <60> now;
	turn A3 to y-axis <-30> now;
	turn A4 to z-axis <-45> now;
	turn A51 to z-axis <45> now;
	turn A1 to y-axis <30> now;
	turn A52 to z-axis <45> now;
	turn A2 to y-axis <30> now;
	turn B31 to x-axis <45> now;
	turn B32 to x-axis <45> now;
	turn B1 to x-axis <-45> now;
	turn B2 to x-axis <-45> now;
	turn C3 to y-axis <30> now;
	turn C4 to z-axis <45> now;
	turn C51 to z-axis <-45> now;
	turn C1 to y-axis <-30> now;
	turn C52 to z-axis <-45> now;
	turn C2 to y-axis <-30> now;
	turn D3 to y-axis <-30> now;
	turn D4 to z-axis <-45> now;
	turn D51 to z-axis <45> now;
	turn D1 to y-axis <30> now;
	turn D52 to z-axis <45> now;
	turn D2 to y-axis <30> now;
	turn E31 to x-axis <-45> now;
	turn E32 to x-axis <-45> now;
	turn E1 to x-axis <45> now;
	turn E2 to x-axis <45> now;
	turn F3 to y-axis <30> now;
	turn F4 to z-axis <-45> now;
	turn F51 to z-axis <45> now;
	turn F1 to y-axis <-30> now;
	turn F52 to z-axis <45> now;
	turn F2 to y-axis <-30> now;
	turn A0 to x-axis <-90> now;
	turn B to x-axis <-90> now;
	turn C0 to x-axis <-90> now;
	turn D0 to x-axis <90> now;
	turn E to x-axis <90> now;
	turn F0 to x-axis <90> now;
	turn A51 to y-axis <22.2> now;
	turn A52 to y-axis <-22.2> now;
	turn B31 to z-axis <22.2> now;
	turn B32 to z-axis <-22.2> now;
	turn C51 to y-axis <22.2> now;
	turn C52 to y-axis <-22.2> now;
	turn D51 to x-axis <22.2> now;
	turn D52 to x-axis <-22.2> now;
	turn E31 to z-axis <-22.2> now;
	turn E32 to z-axis <22.2> now;
	turn F51 to y-axis <22.2> now;
	turn F52 to y-axis <-22.2> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	turn A0 to x-axis <0> speed <50>;
	turn B to x-axis <0> speed <50>;
	turn C0 to x-axis <0> speed <50>;
	turn D0 to x-axis <0> speed <50>;
	turn E to x-axis <0> speed <50>;
	turn F0 to x-axis <0> speed <50>;
	turn A51 to y-axis <0> speed <12.333>;
	turn A52 to y-axis <0> speed <12.333>;
	turn B31 to z-axis <0> speed <12.333>;
	turn B32 to z-axis <0> speed <12.333>;
	turn C51 to y-axis <0> speed <12.333>;
	turn C52 to y-axis <0> speed <12.333>;
	turn D51 to x-axis <0> speed <12.333>;
	turn D52 to x-axis <0> speed <12.333>;
	turn E31 to z-axis <0> speed <12.333>;
	turn E32 to z-axis <0> speed <12.333>;
	turn F51 to y-axis <0> speed <12.333>;
	turn F52 to y-axis <0> speed <12.333>;
	wait-for-turn F52 around y-axis;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode D type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode A type BITMAPONLY | NOHEATCLOUD;
		explode B type BITMAPONLY | NOHEATCLOUD;
		explode C type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode D type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode A type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode C type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode D type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode A type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode C type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode D type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode A type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode C type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
