#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece   base, flare, platform, barrelbase, barrel, lida, lidb;

static-var  deployed, restore_delay, statechg_DesiredState, statechg_StateChanging, tilt;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	turn lida to z-axis <120> speed <50>;
	turn lidb to z-axis <-120> speed <50>;
	wait-for-turn lida around z-axis;


	move platform to y-axis [30] speed [100];
	wait-for-move platform along y-axis;
	deployed = 1;
	return (0);
}

deactivatescr()//jesus this is a daisy chain
{

	deployed = 0;
	turn barrelbase to x-axis <0> speed <30>;
	wait-for-turn barrelbase around y-axis;
	sleep 500;

	
	turn platform to y-axis <0> speed <40>;
	wait-for-turn platform around y-axis;
	move platform to y-axis [-40] speed [50];
	wait-for-move platform along y-axis;



	turn lida to z-axis <0> speed <40>;
	turn lidb to z-axis <0> speed <40>;
	wait-for-turn lida around z-axis;


	sleep 1000;
	return (0);

}

Go()
{
	call-script activatescr();
	return (0);
}

Stop()
{
	sleep 4000;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	
	move barrel to y-axis [29] now;
	move platform to y-axis [-40] now;//unpack
	
	hide flare;
	deployed = 0;
	restore_delay = 3000;
	call-script InitState();
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( deployed==0 )//deny until deployed
	{
		sleep 250;
	}
	

	turn platform to y-axis heading speed <50>;
	wait-for-turn platform around y-axis;
	tilt = (pitch/6);//this should not be needed yet here we are
	turn barrelbase to x-axis tilt speed <30>;
	wait-for-turn barrelbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	emit-sfx 1024 + 1 from flare;
	move barrel to y-axis [19] now;
	sleep 100;
	move barrel to y-axis [29] speed [60];
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = barrel;
	return (0);
}
AimFromPrimary (piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lida type FIRE | SMOKE | FALL | BITMAPONLY | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode lidb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lida type BITMAPONLY | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lidb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lida type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lidb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
