#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, skirt, corecont,
	  Acore, A, Ar, Ar1, A1, AL, AL1,
	  Bcore, B, Br, Br1, B1, BL, BL1,
	  Ccore, C, Cr, Cr1, C1, CL, CL1,
	  Dcore, D, Dr, Dr1, D1, DL, DL1,
	  Ecore, E, Er, Er1, E1, EL, EL1,
	  Fcore, F, Fr, Fr1, F1, FL, FL1;//fuck me SLIGHTLY LESS

static-var  Activating, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Go()
{
	if( Activating )
	{
		set ACTIVATION to 0;
		return (0);
	}
	turn A to z-axis <140> speed <80.000000>;
	turn B to z-axis <140> speed <80.000000>;
	turn C to z-axis <140> speed <80.000000>;
	turn D to z-axis <140> speed <80.000000>;
	turn E to z-axis <140> speed <80.000000>;
	turn F to z-axis <140> speed <80.000000>;
	wait-for-turn A around z-axis;
	

	turn AR1 to y-axis <45> speed <120.000000>;
	turn BR1 to y-axis <45> speed <120.000000>;
	turn CR1 to y-axis <45> speed <120.000000>;
	turn DR1 to y-axis <45> speed <120.000000>;
	turn ER1 to y-axis <45> speed <120.000000>;
	turn FR1 to y-axis <45> speed <120.000000>;
	wait-for-turn AR1 around y-axis;
	
	turn AL1 to y-axis <-45> speed <120.000000>;
	turn BL1 to y-axis <-45> speed <120.000000>;
	turn CL1 to y-axis <-45> speed <120.000000>;
	turn DL1 to y-axis <-45> speed <120.000000>;
	turn EL1 to y-axis <-45> speed <120.000000>;
	turn FL1 to y-axis <-45> speed <120.000000>;


	turn AL1 to z-axis <0> speed <180.000000>;
	turn BL1 to z-axis <0> speed <180.000000>;
	turn CL1 to z-axis <0> speed <180.000000>;
	turn DL1 to z-axis <0> speed <180.000000>;
	turn EL1 to z-axis <0> speed <180.000000>;
	turn FL1 to z-axis <0> speed <180.000000>;

	wait-for-turn AR1 around y-axis;


	//show emit;
	set ARMORED to 0;
	set YARD_OPEN to 0;
}

Stop()
{
	
	turn AL1 to y-axis <-179> speed <180.000000>;
	turn AR1 to y-axis <179> speed <100.000000>;

	turn BL1 to y-axis <-179> speed <180.000000>;
	turn BR1 to y-axis <179> speed <100.000000>;
	
	turn CL1 to y-axis <-179> speed <180.000000>;
	turn CR1 to y-axis <179> speed <100.000000>;

	turn DL1 to y-axis <-179> speed <180.000000>;
	turn DR1 to y-axis <179> speed <100.000000>;
	
	turn EL1 to y-axis <-179> speed <180.000000>;
	turn ER1 to y-axis <179> speed <100.000000>;

	turn FL1 to y-axis <-179> speed <180.000000>;
	turn FR1 to y-axis <179> speed <100.000000>;
	
	
	turn A to z-axis <-39.000000> speed <100.000000>;
	turn B to z-axis <-39.000000> speed <100.000000>;
	turn C to z-axis <-39.000000> speed <100.000000>;
	turn D to z-axis <-39.000000> speed <100.000000>;
	turn E to z-axis <-39.000000> speed <100.000000>;
	turn F to z-axis <-39.000000> speed <100.000000>;


	wait-for-turn AR1 around y-axis;

	wait-for-turn A around z-axis;
	
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{	
	//unhack
	hide skirt;
	
	turn A to z-axis <-39.000000> now;
	turn B to z-axis <-39.000000> now;
	turn C to z-axis <-39.000000> now;
	turn D to z-axis <-39.000000> now;
	turn E to z-axis <-39.000000> now;
	turn F to z-axis <-39.000000> now;
	
	
	move corecont to y-axis [26] now;
	//move Al to y-axis [300] now;
	//move Ar to y-axis [300] now;
	//move A1 to y-axis [300] now;
	
	
	
	
	
	turn Bcore to y-axis <60> now;
	turn Ccore to y-axis <120> now;
	turn Dcore to y-axis <180> now;
	turn Ecore to y-axis <240> now;
	turn Fcore to y-axis <300> now;
	
	

	turn Ar to x-axis <20.5> now;
	turn Al to x-axis <-20.5> now;
	turn Br to x-axis <20.5> now;
	turn Bl to x-axis <-20.5> now;
	turn Cr to x-axis <20.5> now;
	turn Cl to x-axis <-20.5> now;
	turn Dr to x-axis <20.5> now;
	turn Dl to x-axis <-20.5> now;
	turn Er to x-axis <20.5> now;
	turn El to x-axis <-20.5> now;
	turn Fr to x-axis <20.5> now;
	turn Fl to x-axis <-20.5> now;
	
	
	turn AL1 to y-axis <-179> now;
	turn AR1 to y-axis <179> now;

	turn BL1 to y-axis <-179> now;
	turn BR1 to y-axis <179> now;
	
	turn CL1 to y-axis <-179> now;
	turn CR1 to y-axis <179> now;

	turn DL1 to y-axis <-179> now;
	turn DR1 to y-axis <179> now;
	
	turn EL1 to y-axis <-179> now;
	turn ER1 to y-axis <179> now;

	turn FL1 to y-axis <-179> now;
	turn FR1 to y-axis <179> now;
	
	
	
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	Activating = 0;
}

Activate()
{
	if( Activating )
	{
		set ACTIVATION to 0;
		return (0);
	}
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Activating = 1;
	}
	if( Activating )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Activating = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode a type BITMAPONLY;
		explode b type BITMAPONLY;
		explode c type BITMAPONLY;
		explode d type BITMAPONLY;
		explode e type BITMAPONLY;
		explode f type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode a type SMOKE | FALL;
		explode a1 type  FALL;
		explode ar type SMOKE | FALL;
		explode al type FIRE | SMOKE | FALL;
		explode b type SMOKE | FALL;
		explode b1 type  FALL;
		explode br type SMOKE | FALL;
		explode bl type FIRE | SMOKE | FALL;
		explode c type SMOKE | FALL;
		explode c1 type  FALL;
		explode cr type SMOKE | FALL;
		explode cl type FIRE | SMOKE | FALL;
		
		explode d type SMOKE | FALL;
		explode d1 type  FALL;
		explode dr type SMOKE | FALL;
		explode dl type FIRE | SMOKE | FALL;
		explode e type SMOKE | FALL;
		explode e1 type  FALL;
		explode er type SMOKE | FALL;
		explode el type FIRE | SMOKE | FALL;
		explode f type SMOKE | FALL;
		explode f1 type  FALL;
		explode fr type SMOKE | FALL;
		explode fl type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode a type SMOKE | FALL;
		explode a1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ar type SMOKE | FALL;
		explode al type FIRE | SMOKE | FALL;
		explode b type SMOKE | FALL;
		explode b1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode br type SMOKE | FALL;
		explode bl type FIRE | SMOKE | FALL;
		explode c type SMOKE | FALL;
		explode c1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode cr type SMOKE | FALL;
		explode cl type FIRE | SMOKE | FALL;
		
		explode d type SMOKE | FALL;
		explode d1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode dr type SMOKE | FALL;
		explode dl type FIRE | SMOKE | FALL;
		explode e type SMOKE | FALL;
		explode e1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode er type SMOKE | FALL;
		explode el type FIRE | SMOKE | FALL;
		explode f type SMOKE | FALL;
		explode f1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fr type SMOKE | FALL;
		explode fl type FIRE | SMOKE | FALL;
			return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode corecont type EXPLODE_ON_HIT | SMOKE | FALL;
		explode a type SMOKE | FALL;
		explode a1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ar type SMOKE | FALL;
		explode al type FIRE | SMOKE | FALL;
		explode b type SMOKE | FALL;
		explode b1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode br type SMOKE | FALL;
		explode bl type FIRE | SMOKE | FALL;
		explode c type SMOKE | FALL;
		explode c1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode cr type SMOKE | FALL;
		explode cl type FIRE | SMOKE | FALL;
		
		explode d type SMOKE | FALL;
		explode d1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode dr type SMOKE | FALL;
		explode dl type FIRE | SMOKE | FALL;
		explode e type SMOKE | FALL;
		explode e1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode er type SMOKE | FALL;
		explode el type FIRE | SMOKE | FALL;
		explode f type SMOKE | FALL;
		explode f1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fr type SMOKE | FALL;
		explode fl type FIRE | SMOKE | FALL;
	
		return(corpsetype);
}